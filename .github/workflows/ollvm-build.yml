name: Build OLLVM-enabled toolchains
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ref to extract from'
        type: string
        default: 'master'
      upload:
        description: 'Upload the artifacts'
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      LLVM_VERSION: ${{steps.get-parameters.outputs.LLVM_VERSION}}
      MINGW_W64_VERSION: ${{steps.get-parameters.outputs.MINGW_W64_VERSION}}
      PYTHON_VERSION_MINGW: ${{steps.get-parameters.outputs.PYTHON_VERSION_MINGW}}
      TAG: ${{steps.get-parameters.outputs.TAG}}
      COMMIT_DATE_UNIX: ${{steps.get-parameters.outputs.COMMIT_DATE_UNIX}}
      BUILD_DATE: ${{steps.get-parameters.outputs.BUILD_DATE}}
      BUILD_DATE_UNIX: ${{steps.get-parameters.outputs.BUILD_DATE_UNIX}}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{github.event_name == 'workflow_dispatch' && inputs.ref || 'master'}}
      - name: Get build parameters
        id: get-parameters
        run: |
          # Force LLVM version to 17.0.6 for OLLVM compatibility
          echo LLVM_VERSION=llvmorg-17.0.6 >> $GITHUB_OUTPUT
          echo MINGW_W64_VERSION=$(git ls-remote https://github.com/mingw-w64/mingw-w64.git | grep 'refs/heads/master$' | awk '{print $1}') >> $GITHUB_OUTPUT
          echo PYTHON_VERSION_MINGW=$(git ls-remote https://github.com/msys2-contrib/cpython-mingw.git | grep 'refs/heads/mingw-v3.12.9$' | awk '{print $1}') >> $GITHUB_OUTPUT
          TAG="$(date '+%Y%m%d')-ollvm"
          echo TAG=${TAG} >> $GITHUB_OUTPUT
          echo COMMIT_DATE_UNIX=$(git log -1 --pretty=%ct $GITHUB_SHA) >> $GITHUB_OUTPUT
          BUILD_DATE=$(date -u '+%FT%TZ')
          echo BUILD_DATE=${BUILD_DATE} >> $GITHUB_OUTPUT
          echo BUILD_DATE_UNIX=$(date -d "${BUILD_DATE}" +%s) >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT >> parameters.txt
      - uses: actions/upload-artifact@v4
        with:
          name: parameters
          path: |
            parameters.txt
          retention-days: 7

  # Build OLLVM-enabled toolchain for Linux
  linux-ollvm:
    needs: [prepare]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{github.event_name == 'workflow_dispatch' && inputs.ref || 'master'}}
      - name: Build OLLVM toolchain
        env:
          LLVM_VERSION: ${{needs.prepare.outputs.LLVM_VERSION}}
          MINGW_W64_VERSION: ${{needs.prepare.outputs.MINGW_W64_VERSION}}
          TAG: ${{needs.prepare.outputs.TAG}}
          SOURCE_DATE_EPOCH: ${{needs.prepare.outputs.COMMIT_DATE_UNIX}}
          BUILD_DATE: ${{needs.prepare.outputs.BUILD_DATE}}
        run: |
          # Apply OLLVM patches
          echo "Applying OLLVM patches..."
          bash apply-ollvm-patches.sh
          # Build with OLLVM support
          LLVM_CMAKEFLAGS="-DLLVM_ENABLE_LIBXML2=OFF -DLLDB_ENABLE_PYTHON=OFF" ./build-all.sh $(pwd)/install/llvm-mingw --disable-clang-tools-extra
          .github/workflows/store-version.sh install/llvm-mingw/versions.txt
          ./test-libcxx-module.sh $(pwd)/install/llvm-mingw
          ./run-tests.sh $(pwd)/install/llvm-mingw
          # Test OLLVM functionality
          if [ -f test-ollvm-integration.sh ]; then
            echo "Testing OLLVM integration..."
            bash test-ollvm-integration.sh $(pwd)/install/llvm-mingw
          fi
          cd install
          DISTRO=ubuntu-$(grep DISTRIB_RELEASE /etc/lsb-release | cut -f 2 -d =)-$(uname -m)
          NAME=llvm-mingw-$TAG-ucrt-$DISTRO-ollvm
          mv llvm-mingw $NAME
          tar -Jcf ../$NAME.tar.xz --format=ustar --numeric-owner --owner=0 --group=0 --sort=name --mtime="$BUILD_DATE" $NAME
      - uses: actions/upload-artifact@v4
        with:
          name: linux-ucrt-x86_64-ollvm-toolchain
          path: |
            llvm-mingw-*.tar.xz
          retention-days: 7
      - name: Upload to release
        if: inputs.upload
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{needs.prepare.outputs.TAG}}
          files: llvm-mingw-*.tar.xz
          name: OLLVM-enabled LLVM-MinGW ${{needs.prepare.outputs.TAG}}
          body: |
            OLLVM-enabled LLVM-MinGW toolchain built from LLVM 17.0.6
            
            This build includes OLLVM obfuscation passes:
            - Control Flow Flattening (fla)
            - Bogus Control Flow (bcf) 
            - Instruction Substitution (sub)
            - Functions Annotations (fco)
            - Split Basic Blocks (split)
            
            Usage: clang -mllvm -fla -mllvm -bcf -mllvm -sub your_code.c